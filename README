# Configurable Input Fields for Android

A flexible, feature-rich library for creating customizable input fields in Android applications.

## Features

- **Multiple Input Types**: Support for various input types including text, email, password, URI, and card number
- **Customizable Styling**: Extensive styling options for all components
- **Validation**: Built-in and custom validation support
- **Error Handling**: Visual error feedback with customizable styling
- **Outlined Box Support**: Optional outlined box with customizable stroke, color, and corner radius
- **Password Visibility Toggle**: Built-in show/hide functionality for password fields
- **URI Field Support**: Special handling for URI input with "Open" button
- **Card Number Formatting**: Automatic formatting for credit card numbers

## Installation

1. Copy the `ConfigurableInputFields` module into your project
2. Add the module dependency in your app's `build.gradle` file:

```gradle
dependencies {
    implementation project(':configurableInputFields')
}
```

## Basic Usage

Add the InputField to your layout XML:

```xml
<configurable.input.maintocopy.presentation.custom.InputField
    android:id="@+id/emailField"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:editTextHeight="48dp"
    app:hint="Enter your email"
    app:header="Email"
    app:inputType="textEmailAddress" />
```

In your Activity or Fragment:

```kotlin
// Get reference to the input field
val emailField: InputField = findViewById(R.id.emailField)

// Get text from the field
val email = emailField.getText()

// Set text to the field
emailField.setText("example@email.com")

// Check if input is valid
if (emailField.isCurrentInputCorrect()) {
    // Proceed with valid input
}

// Set custom error handler
emailField.setErrorHandler(object : InputField.InputErrorHandler {
    override fun getErrorResourceForText(inputText: String): Int? {
        return if (validateEmail(inputText)) null else R.string.invalid_email
    }
})
```

## Using Built-in Validation

The library includes common validators in the `InputValidator` utility class:

```kotlin
// Email validation
emailField.setErrorHandler(InputValidator.emailValidator())

// Minimum length validation
passwordField.setErrorHandler(InputValidator.minLengthValidator(8, R.string.password_too_short))

// Required field validation
nameField.setErrorHandler(InputValidator.notEmptyValidator(R.string.name_required))

// Combine multiple validators
passwordField.setErrorHandler(InputValidator.compositeValidator(
    InputValidator.notEmptyValidator(R.string.password_required),
    InputValidator.minLengthValidator(8, R.string.password_too_short),
    InputValidator.patternValidator(Regex(".*[A-Z].*"), R.string.password_needs_uppercase)
))
```

## Input Types

The library supports these input types:

- `text` - Standard text input
- `textEmailAddress` - Email input with validation
- `textPassword` - Password input with visibility toggle
- `textUri` - URI input with "Open" button
- `cardNumber` - Credit card number with formatting (4-digit groups)

## Customization Reference

### EditText Attributes

| Attribute | Description |
|-----------|-------------|
| `text` | Initial text |
| `maxLines` | Maximum number of lines |
| `maxLength` | Maximum text length |
| `hint` | Hint text shown when empty |
| `editTextHeight` | Height of the EditText |
| `editTextFontFamily` | Font family resource |
| `editTextColor` | Text color |
| `editTextSize` | Text size |
| `editTextStartIconDrawable` | Start icon drawable |
| `editTextEndIconDrawable` | End icon drawable |
| `editTextBackground` | Background drawable |
| `editTextPaddingStart` | Start padding |
| `editTextPaddingEnd` | End padding |
| `editTextDrawablePadding` | Padding between text and drawables |
| `editTextHintTextColor` | Hint text color |
| `inputType` | Input type (see Android's InputType values) |

### Header Attributes

| Attribute | Description |
|-----------|-------------|
| `header` | Header text |
| `headerHideWhenEmptyText` | Whether to hide header when field is empty |
| `headerTextSize` | Header text size |
| `headerTextColor` | Header text color |
| `headerTextFontFamily` | Header font family resource |
| `headerTextMarginStart` | Header start margin |
| `headerTextMarginBottom` | Header bottom margin |

### Error Attributes

| Attribute | Description |
|-----------|-------------|
| `isErrorEnabled` | Enable/disable error display |
| `errorText` | Default error text |
| `errorTextSize` | Error text size |
| `errorTextColor` | Error text color |
| `errorTextFontFamily` | Error font family resource |
| `errorTextMarginStart` | Error start margin |
| `errorTextMarginTop` | Error top margin |
| `errorDrawablePadding` | Padding between error icon and text |
| `errorIconDrawable` | Error icon drawable |

### Outlined Box Attributes

| Attribute | Description |
|-----------|-------------|
| `isOutlinedBox` | Enable/disable outlined box |
| `boxStrokeWidth` | Outline stroke width |
| `boxStrokeCornerRadius` | Outline corner radius (all corners) |
| `boxStrokeCornerRadiusTopStart` | Top start corner radius |
| `boxStrokeCornerRadiusTopEnd` | Top end corner radius |
| `boxStrokeCornerRadiusBottomStart` | Bottom start corner radius |
| `boxStrokeCornerRadiusBottomEnd` | Bottom end corner radius |
| `boxStrokeColor` | Outline color in normal state |
| `boxStrokeFocusedColor` | Outline color in focused state |
| `errorBoxStrokeColor` | Outline color in error state |

### Password Field Attributes

| Attribute | Description |
|-----------|-------------|
| `onPasswordInvisibleDrawable` | Icon for when password is hidden |
| `onPasswordVisibleDrawable` | Icon for when password is visible |

### URI Field Attributes

| Attribute | Description |
|-----------|-------------|
| `openUriText` | Text for the "Open" button |
| `openUriTextColor` | Color of the "Open" button text |
| `openUriTextSize` | Size of the "Open" button text |
| `openUriTextFontFamily` | Font family for the "Open" button |
| `openUriEndDrawable` | Drawable for the end of the URI field |

### End Drawable Button

| Attribute | Description |
|-----------|-------------|
| `enableEndDrawableButton` | Enable/disable the end drawable button |
| `endDrawableButtonIcon` | Icon for the end drawable button |

## Examples

### Text Field with Error

```xml
<configurable.input.maintocopy.presentation.custom.InputField
    android:id="@+id/nameField"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:header="Full Name"
    app:hint="Enter your full name"
    app:isErrorEnabled="true"
    app:errorText="Name is required"
    app:errorTextColor="#FF0000"
    app:errorIconDrawable="@drawable/ic_error" />
```

### Password Field

```xml
<configurable.input.maintocopy.presentation.custom.InputField
    android:id="@+id/passwordField"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:header="Password"
    app:hint="Enter your password"
    app:inputType="textPassword"
    app:onPasswordVisibleDrawable="@drawable/ic_visible"
    app:onPasswordInvisibleDrawable="@drawable/ic_invisible" />
```

### Credit Card Field

```xml
<configurable.input.maintocopy.presentation.custom.InputField
    android:id="@+id/cardNumberField"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:header="Card Number"
    app:hint="Enter card number"
    app:inputType="cardNumber"
    app:editTextStartIconDrawable="@drawable/ic_credit_card" />
```

### Outlined Field with Custom Styling

```xml
<configurable.input.maintocopy.presentation.custom.InputField
    android:id="@+id/emailField"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    app:header="Email Address"
    app:headerTextColor="#0066CC"
    app:hint="Enter your email"
    app:inputType="textEmailAddress"
    app:isOutlinedBox="true"
    app:boxStrokeWidth="2dp"
    app:boxStrokeCornerRadius="8dp"
    app:boxStrokeColor="#CCCCCC"
    app:boxStrokeFocusedColor="#0066CC"
    app:errorBoxStrokeColor="#FF0000" />
```
